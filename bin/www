#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('my-website:server');
var http = require('http');
// var https = require('https');
var fs = require('fs');

/**
 * HTTPS Cert and Key
 */

 /*
var options = {
  key: fs.readFileSync('/etc/letsencrypt/live/wilsonfwang.com/privkey.pem'),
  cert: fs.readFileSync('/etc/letsencrypt/live/wilsonfwang.com/fullchain.pem')
}; */

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP and HTTPS servers.
 */

// var server = https.createServer(options, app)

var httpserver = http.createServer(app)
  /*function (req, res) {
  res.writeHead(302, {'Location': 'https://wilsonfwang.com' + req.url});
  res.end();
}) */

var io = require("socket.io")(httpserver); // change this on dev

/**
 * Listen on provided port, on all network interfaces.
 */

httpserver.listen(80);
httpserver.on('http error', onError);
httpserver.on('http listening', onListening);

/**
 * Socket server that is listening on port 443 for some god forsaken reason.
 * Currently only used for gold
 */

io.on('connection', (socket) => {
  console.log("user connected")
  /**
   * Gold Game Server code
   */
  socket.on('joingame', function(code){
    socket.join(code);
    console.log("User Joined" + code);
  });

  socket.on('disconnect', function() {
    console.log("User Disconnected");
  });
});

/*
server.listen(port);
server.on('https error', onError);
server.on('https listening', onListening); */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
